name: Multi-Target Build AmneziaWG

on:
  workflow_dispatch:
    inputs:
      openwrt_version:
        description: "OpenWrt version"
        required: true
        default: "24.10.3"
      amneziawg_version:
        description: "AmneziaWG version"
        required: true
        default: "main"
      compile_kmod:
        description: "Compile kernel module"
        required: true
        type: boolean
        default: true
      compile_go:
        description: "Compile Go implementation"
        required: true
        type: boolean
        default: true

jobs:
  generate-matrix:
    runs-on: ubuntu-22.04
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install dependencies
        run: |
            npm install axios cheerio

      - name: Generate build matrix
        id: set-matrix
        run: |
            MATRIX=$(node index.js ${{ github.event.inputs.openwrt_version }})
            echo "matrix=$MATRIX" >> $GITHUB_OUTPUT

  build-awg:
    needs: generate-matrix
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.generate-matrix.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v5
        with:
          path: amneziawg

      - name: Install dependencies
        run: |
            sudo apt-get update
            sudo apt-get install -y python3-pyelftools python3-dev python3-setuptools swig curl zip

      - name: Download and prepare SDK
        run: |
            set -e -x
            VERSION="${{ github.event.inputs.openwrt_version }}"
            TARGET="${{ matrix.target }}"
            SUBTARGET="${{ matrix.subtarget }}"

            if [ "$VERSION" = "SNAPSHOT" ]; then
                BASE_URL="https://downloads.immortalwrt.org/snapshots/targets/$TARGET/$SUBTARGET"
            else
                BASE_URL="https://downloads.immortalwrt.org/releases/$VERSION/targets/$TARGET/$SUBTARGET"
            fi

            SDK_URL=$(curl -s "$BASE_URL/" | grep -oP 'href="[^"]*immortalwrt-sdk[^"]+\.tar\.zst"' | sed -e 's/href="//' -e 's/"$//' | head -n1)
            curl -fsLO "$BASE_URL/$SDK_URL"
            tar -xf $(basename "$SDK_URL")
            rm -f $(basename "$SDK_URL")
            mv *sdk-* openwrt

            echo "src-cpy awgopenwrt ../amneziawg" >> openwrt/feeds.conf.default
            ./openwrt/scripts/feeds update -a

            curl -fsL "$BASE_URL/config.buildinfo" > openwrt/.config
            echo "CONFIG_PACKAGE_kmod-amneziawg=y" >> openwrt/.config
            echo "CONFIG_PACKAGE_amneziawg-go=y" >> openwrt/.config
            echo "CONFIG_PACKAGE_amneziawg-tools=y" >> openwrt/.config
            echo "CONFIG_PACKAGE_luci-proto-amneziawg=y" >> openwrt/.config

            ./openwrt/scripts/feeds install -a
            make -C openwrt defconfig

      - name: Compile AWG packages
        continue-on-error: true
        run: |
            cd openwrt
            if [ "${{ github.event.inputs.compile_kmod }}" = "true" ]; then
                make package/kmod-amneziawg/{clean,download,prepare,compile} -j$(nproc) || echo "kmod-amneziawg failed, continue"
            fi
            if [ "${{ github.event.inputs.compile_go }}" = "true" ]; then
                make package/amneziawg-go/{clean,download,prepare,compile} -j$(nproc) || echo "amneziawg-go failed, continue"
            fi
            make package/luci-proto-amneziawg/{clean,download,prepare,compile} -j$(nproc) || echo "luci-proto-amneziawg failed, continue"
            make package/amneziawg-tools/{clean,download,prepare,compile} -j$(nproc) || echo "amneziawg-tools failed, continue"

      - name: Upload release assets
        run: |
            mkdir -p awgrelease

            # kmod пакеты
            cp -f openwrt/bin/targets/${{ matrix.target }}/${{ matrix.subtarget }}/packages/kmod-amneziawg* awgrelease/ 2>/dev/null || true

            # все amneziawg пакеты (включая -go, -tools, luci и i18n)
            find "openwrt/bin/packages/${{ matrix.pkgarch }}/" -maxdepth 2 -type f -name '*amneziawg*' -exec cp {} awgrelease/ \; 2>/dev/null || true

            ZIP_NAME="immortal-awg-${{ github.event.inputs.openwrt_version }}-${{ matrix.target }}-${{ matrix.subtarget }}.zip"

            if [ "$(ls -A awgrelease)" ]; then
              zip -r "$ZIP_NAME" awgrelease
              gh release create "${{ github.event.inputs.openwrt_version }}" \
                --title "Immortal AWG ${{ github.event.inputs.openwrt_version }}" \
                --notes "Build from workflow" \
                --repo "${{ github.repository }}" || echo "Release already exists"
              gh release upload "${{ github.event.inputs.openwrt_version }}" "$ZIP_NAME" \
                --clobber \
                --repo "${{ github.repository }}"
            else
              echo "⚠️ Пакеты не найдены, архив не создан"
            fi
        env:
            GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
