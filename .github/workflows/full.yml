name: Build immortalwrt AmneziaWG (one-shot)

on:
  workflow_dispatch:
    inputs:
      openwrt_version:
        description: "OpenWrt version"
        type: string
        required: true
        default: "24.10.3"
      openwrt_arch:
        description: "OpenWrt arch"
        type: string
        required: true
        default: "aarch64_generic"
      openwrt_target:
        description: "OpenWrt target"
        type: string
        required: true
        default: "rockchip"
      openwrt_subtarget:
        description: "OpenWrt subtarget"
        type: string
        required: true
        default: "armv8"
      compile_go:
        description: "Compile Go implementation"
        type: boolean
        default: true
      branch_go:
        description: "Branch for amneziawg-go"
        type: string
        default: "main"
      branch_tools:
        description: "Branch for amneziawg-tools"
        type: string
        default: "main"
      update_go:
        description: "Update Go version"
        type: boolean
        default: true

jobs:
  build:
    runs-on: ubuntu-22.04
    timeout-minutes: 360
    steps:
      - name: Checkout OpenWrt
        uses: actions/checkout@v5
        with:
          path: openwrt
          repository: immortalwrt/immortalwrt
          ref: ${{ inputs.openwrt_version == 'SNAPSHOT' && 'master' || format('v{0}', inputs.openwrt_version) }}
          fetch-depth: 0

      - name: Checkout AmneziaWG repo
        uses: actions/checkout@v5
        with:
          path: amneziawg
          repository: samara15321/awg2
          ref: main
          fetch-depth: 0

      - name: Checkout ImmortalWrt Packages
        if: ${{ inputs.update_go }}
        uses: actions/checkout@v5
        with:
          path: packages
          repository: immortalwrt/packages
          fetch-depth: 0

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pyelftools curl

      - name: Copy AmneziaWG packages into OpenWrt tree
        run: |
          set -e -x
          cp -r amneziawg/amneziawg-go openwrt/package/
          cp -r amneziawg/amneziawg-tools openwrt/package/
          cp -r amneziawg/luci-proto-amneziawg openwrt/package/

      - name: Cache Tools and Toolchain
        id: cache-tools-toolchain
        uses: actions/cache@v4
        with:
          path: |
            openwrt/staging_dir
            openwrt/build_dir/host
            openwrt/build_dir/toolchain-*
          key: ${{ runner.os }}-openwrt-cache-toolchain-kernel-${{ inputs.openwrt_version }}-${{ inputs.openwrt_arch }}-${{ inputs.openwrt_target }}-${{ inputs.openwrt_subtarget }}

      - name: Setup feeds and config
        run: |
          cd openwrt
          echo "src-cpy awgopenwrt ../amneziawg" >> feeds.conf.default
          ./scripts/feeds update -a
          if [ "${{ inputs.openwrt_version }}" = "SNAPSHOT" ]; then
            base_url="https://downloads.immortalwrt.org/snapshots/targets/${{ inputs.openwrt_target }}/${{ inputs.openwrt_subtarget }}"
          else
            base_url="https://downloads.immortalwrt.org/releases/${{ inputs.openwrt_version }}/targets/${{ inputs.openwrt_target }}/${{ inputs.openwrt_subtarget }}"
          fi
          curl -fsL "$base_url/config.buildinfo" > .config
          echo "CONFIG_PACKAGE_amneziawg-go=y" >> .config
          echo "CONFIG_PACKAGE_amneziawg-tools=y" >> .config
          echo "CONFIG_PACKAGE_luci-proto-amneziawg=y" >> .config

      - name: Update Go version
        if: ${{ inputs.update_go }}
        run: |
          set -e -x
          rm -r openwrt/feeds/packages/lang/golang
          cp -r packages/lang/golang openwrt/feeds/packages/lang

      - name: Build toolchain and kernel
        run: |
          cd openwrt
          ./scripts/feeds install -a
          make defconfig
          make tools/install -j$(nproc) && make toolchain/install -j$(nproc) && make target/linux/compile  V=s

      - name: Update Makefiles to latest commits
        run: |
          set -e -x
          TODAY=$(date +%Y%m%d)
          for PKG in amneziawg-go amneziawg-tools; do
            cd "openwrt/package/$PKG"
            MF="Makefile"
            if [ -f "$MF" ]; then
              REPO_URL=$(grep -E "^PKG_SOURCE_URL.*=" "$MF" | sed -E 's/.*= *//')
              if [ "$PKG" = "amneziawg-go" ]; then
                BRANCH="${{ inputs.branch_go }}"
              else
                BRANCH="${{ inputs.branch_tools }}"
              fi
              echo "ðŸ”„ Updating $PKG from $REPO_URL ($BRANCH)"
              LATEST_COMMIT=$(git ls-remote "$REPO_URL" $BRANCH | cut -f1)
              TMPFILE=$(mktemp)
              curl -L "$REPO_URL/archive/$LATEST_COMMIT.tar.gz" -o "$TMPFILE"
              LATEST_HASH=$(sha256sum "$TMPFILE" | awk '{print $1}')
              rm -f "$TMPFILE"
              sed -i "s/^PKG_SOURCE_VERSION:=.*/PKG_SOURCE_VERSION:=$LATEST_COMMIT/" "$MF"
              sed -i "s/^PKG_MIRROR_HASH:=.*/PKG_MIRROR_HASH:=$LATEST_HASH/" "$MF"
              sed -i "s/^PKG_VERSION:=.*/PKG_VERSION:=1.0.$TODAY/" "$MF"
              grep -E "PKG_VERSION|PKG_SOURCE_VERSION|PKG_MIRROR_HASH" "$MF" || true
            fi
            cd - >/dev/null
          done

      - name: Download AmneziaWG sources
        run: |
          cd openwrt
          if [ "${{ inputs.compile_go }}" = "true" ]; then
            make package/amneziawg-go/download V=s
          fi
          make package/amneziawg-tools/download V=s

      - name: Build AmneziaWG packages
        env:
          compile_go: ${{ inputs.compile_go }}
        run: |
          cd openwrt
          if [ "${{ env.compile_go }}" = "true" ]; then
            make package/amneziawg-go/{clean,download,prepare,compile} -j$(nproc) V=s
          fi
          make package/amneziawg-tools/{clean,download,prepare,compile} -j$(nproc) V=s
          make package/luci-proto-amneziawg/{clean,download,prepare,compile} -j$(nproc) V=s

      - name: Collect artifacts
        run: |
          mkdir awgrelease
          find "openwrt/bin/packages/${{ inputs.openwrt_arch }}/awgopenwrt" -maxdepth 1 -type f -name '*.ipk' -exec cp {} awgrelease \;

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: amneziawg-${{ inputs.openwrt_version }}_${{ inputs.openwrt_arch }}_${{ inputs.openwrt_target }}_${{ inputs.openwrt_subtarget }}
          path: awgrelease/*
